/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Arrays;

public class App {
    private static final String HOSTNAME = "vs.lxd-vs.uni-ulm.de";
    private static final String GET_NEW_MATH = "Please provide a new expression!";
    private static final int PORT = 5678;

    /**
     * @brief Calculate the result of an equation
     *
     * The equation may only contain numbers in the Intervall [1,9], does not contain any brackets and only
     * uses the plus and multiplication operators.
     *
     * @param expr String representation of the expression
     *
     * @return integer based result of @param expr
     */
    private static int evaluateMath(String expr)
    {
        String[] addParts = expr.split("\\+");
        int sum = 0;

        for(var part : addParts)
        {
            String[] mulParts = part.split("\\*");
            int prod = 1;

            for(var part2 : mulParts)
            {
                prod *= Integer.parseInt(part2);
            }

            sum += prod;
        }

        return sum;
    }

    /**
     * @brief Calculate the result of an equation
     *
     * The equation may only contain numbers in the Intervall [1,9], does not contain any brackets and only
     * uses the plus and multiplication operators.
     * This implementation uses the Java streams API to calculate the answer.
     *
     * @param expr String representation of the expression
     *
     * @return integer based result of @param expr
     */
    private static int streamEvaluateMath(String expr)
    {
        return Arrays.stream(expr.split("\\+"))
            .mapToInt(part ->
                Arrays.stream(part.split("\\*"))
                    .mapToInt(Integer::parseInt)
                    .reduce(1, (a, b) -> a * b)
            )
            .sum();
    }

    public static void main(String[] args) throws IOException{
        Socket socket = new Socket(HOSTNAME, PORT);
        PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));

        out.println(GET_NEW_MATH);
        String expression = in.readLine();
        int solution = streamEvaluateMath(expression);
        out.println(expression + "=" + solution);
        System.out.println(in.readLine());

        socket.close();
    }
}
