/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.zeromq.SocketType;
import org.zeromq.ZContext;
import org.zeromq.ZMQ;

/**
 * @brief The {@link Controller} coordinates with the Publisher server and directs a Worker instance to do the hard work
 */
public class Controller implements AutoCloseable {
    private static final String HOSTNAME = "vs.lxd-vs.uni-ulm.de";
    private static final int SUBSCRIBER_PORT = 27378;
    private static final int REPLY_PORT = 27379;

    public static void main(final String[] args) {
        try(Controller c = new Controller()) {
            c.listen();
        } catch(Exception e) {
            System.err.println(e.getMessage());
            e.printStackTrace();

            System.exit(1);
        }
    }

    private final ZContext m_context = new ZContext();
    private final ZMQ.Socket m_subscriberSocket = m_context.createSocket(SocketType.SUB);
    private final ZMQ.Socket m_replySocket = m_context.createSocket(SocketType.REP);
    private final ZMQ.Socket m_pushSocket = m_context.createSocket(SocketType.PUSH);
    private final ZMQ.Socket m_pullSocket = m_context.createSocket(SocketType.PULL);

    /**
     * @brief Construct a new {@link Controller} and automatically try to connect to the Publisher server
     */
    public Controller() {
        if(!connectSubscriber() || !connectReplySocket())
            throw new RuntimeException("Failed to connect to the Publisher socket endpoints");

        m_subscriberSocket.subscribe(""); // NOTE: empty string means accept all messages
    }

    /**
     * @brief Start listening to the Publisher indefinetly
     */
    public void listen() {
        String newChallenge = m_subscriberSocket.recvStr().trim();

        // TODO: find out how to make the controller - worker interaction. Workflow:
        // [Publisher] --> [Controller] (send new problem)
        // [Controller] --> [Worker] (same message with the task received from the Publisher)
        // [Worker] --> [Controller] (solved problem in the right submission format)
        // [Controller] --> [Publisher] (relay answer to the problem back to the Publisher)

        // String result = "";
        // m_replySocket.send(result);
    }

    @Override
    public void close() {
        m_pullSocket.close();
        m_pushSocket.close();
        m_replySocket.close();
        m_subscriberSocket.close();
        m_context.close();
    }

    /**
     * @brief Connect the subscriber socket to the remote server
     */
    private boolean connectSubscriber() {
        return m_subscriberSocket.connect("tcp://" + HOSTNAME + ":" + SUBSCRIBER_PORT);
    }

    /**
     * @brief Connect the reply socket to the remote server
     */
    private boolean connectReplySocket() {
        return m_replySocket.connect("tcp://" + HOSTNAME + ":" + REPLY_PORT);
    }
}
